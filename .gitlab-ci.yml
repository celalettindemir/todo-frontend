image: node:lts-alpine

stages:
  - build
  - test
  - package
  - deploy2TestEnv
  - integtest
  - deployProd
  
cache:
  key:
    files:
      - yarn.lock
  paths:
    - node_modules
test:
  image: node:lts-alpine
  stage: test
  script:
    - yarn test:unit
  rules:
  - if: $CI_COMMIT_TAG
  
pact:
  image: node:16.13.2-alpine
  stage: test
  before_script:
    - apk --no-cache add ca-certificates wget bash
    - wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    - wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.29-r0/glibc-2.29-r0.apk
    - apk update
    - apk add glibc-2.29-r0.apk
    - apk add --no-cache wget bash curl jq
  script:
    - curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.88.82/pact-1.88.82-linux-x86_64.tar.gz
    - tar xzf pact-1.88.82-linux-x86_64.tar.gz
    - export PATH=$PATH:/pact/bin
    - yarn test:pact
    - 'curl -v -X PUT -H "Content-Type: application/json" -H "Authorization: $BROKER_TOKEN" -d @pact/pacts/frontend-backend.json "${BROKER_URL}/pacts/provider/Backend/consumer/Frontend/version/${CI_COMMIT_TAG}"'
    - 'BACKEND_VERSION="$(curl -s -H "Authorization: $BROKER_TOKEN" "${BROKER_URL}/pacticipants/Backend/latest-version"| jq ".number" )"'
    - 'curl -X POST --fail -F token=$MY_TRIGGER_TOKEN -F ref=main -F "variables[IsVerifyPact]=true" -F "variables[CI_COMMIT_TAG]=$BACKEND_VERSION" https://gitlab.com/api/v4/projects/34891586/trigger/pipeline'
  rules:
  - if: $CI_COMMIT_TAG

build:
  stage: build
  script:
    - yarn install
    - yarn build
  artifacts:
    paths:
      - "deploy"
  rules:
  - if: $CI_COMMIT_TAG

docker package:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  when: manual
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

gcloud package:
  stage: package
  image: google/cloud-sdk:latest # We'll use Google Cloud SDK for Cloud Run related commands
  script:
    - echo ${GCP_SERVICE_ACCOUNT} > gcloud-service-key.json # Save Google cloud contents in a temporary json file
    - gcloud auth activate-service-account --key-file gcloud-service-key.json # Activate your service account
    - gcloud auth configure-docker
    - gcloud config set project ${GCP_PROJECT_ID}
    - gcloud builds submit --tag gcr.io/${GCP_PROJECT_ID}/${CI_REGISTRY_GKE_IMAGE}:${CI_COMMIT_TAG}  #Run the gcloud build command to build our image
  rules:
    - if: $CI_COMMIT_TAG

gcloud deploy2TestEnv:
  stage: deploy2TestEnv
  image: google/cloud-sdk
  before_script:
    - apt-get -y install jq
  script:
    - echo ${GCP_SERVICE_ACCOUNT} > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    - gcloud config set project ${GCP_PROJECT_ID}
    - gcloud container clusters get-credentials my-cluster --zone us-central1-a
    - sed -i "s/<VERSION>/${CI_COMMIT_TAG}/g" test/frondend-deployment.yaml
    - sed -i "s/<GCP_PROJECT_ID>/${GCP_PROJECT_ID}/g" test/frondend-deployment.yaml
    - sed -i "s/<CI_REGISTRY_GKE_IMAGE>/${CI_REGISTRY_GKE_IMAGE}/g" test/frondend-deployment.yaml
    - kubectl apply -f test/frondend-deployment.yaml
    - kubectl apply -f test/frondend-service.yaml
    - 'BACKEND_VERSION="$(curl -s -H "Authorization: $BROKER_TOKEN" "${BROKER_URL}/pacticipants/Backend/latest-version"| jq ".number" )"'
    - 'VUE_APP_TEST_API_URL=$(kubectl get services frontend-test --output=json | jq ".status.loadBalancer.ingress[0].ip")'
    - echo "TEST_API_URL=$VUE_APP_TEST_API_URL" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
  - if: $CI_COMMIT_TAG

acceptance:
  stage: integtest
  image: node:16.13.2-alpine
  script:
    - apk add --no-cache chromium nss freetype freetype-dev harfbuzz ca-certificates ttf-freefont git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/challenge-test/acceptance.git
    - cd acceptance && npm install
    - VUE_APP_TEST_API_URL=$TEST_API_URL PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser npm start
  dependencies:
    - gcloud deploy2TestEnv
  rules:
  - if: $CI_COMMIT_TAG
  
cdcPactTest:
  stage: integtest
  image: alpine
  before_script:
    - apk add --no-cache curl jq
  script:
    - 'BADGE_ID="$(curl -s -H "Authorization: $BROKER_TOKEN" "${BROKER_URL}/can-i-deploy?pacticipant=Frontend&version=${CI_COMMIT_TAG}"| jq ".summary.deployable" )"'
    - echo $BADGE_ID
    - >
      if [ "$BADGE_ID" == "true" ]; then
        exit 0
      else
        exit 1
      fi
  rules:
  - if: $CI_COMMIT_TAG
  
gcloud deployProd:
  stage: deployProd
  image: google/cloud-sdk
  script:
    - echo ${GCP_SERVICE_ACCOUNT} > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    - gcloud config set project ${GCP_PROJECT_ID}
    - gcloud container clusters get-credentials my-cluster --zone us-central1-a
    - sed -i "s/<VERSION>/${CI_COMMIT_TAG}/g" deployment/frondend-deployment.yaml
    - sed -i "s/<GCP_PROJECT_ID>/${GCP_PROJECT_ID}/g" deployment/frondend-deployment.yaml
    - sed -i "s/<CI_REGISTRY_GKE_IMAGE>/${CI_REGISTRY_GKE_IMAGE}/g" deployment/frondend-deployment.yaml
    - kubectl apply -f deployment/frondend-deployment.yaml
    - kubectl apply -f deployment/frondend-service.yaml
  rules:
  - if: $CI_COMMIT_TAG


